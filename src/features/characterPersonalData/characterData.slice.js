import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  characterData: {
    id: null,
    name: null,
    status: null,
    gender: null,
    type: 'HUMAN',
  }
};


export const loadCharacterData = createAsyncThunk(
  'characterData/load',
  async (id) => {
    const response = await axios.get(`https://rickandmortyapi.com/api/character/${id}`);
    // The value we return becomes the `fulfilled` action payload
    if(response.status === 200) {
      return response.data;
    } else {
      return null;
    }
  }
);

export const saveCharacter = createAsyncThunk(
  'characterData/saveCharacter',
  async (character) => {
    const response = await axios.post(`https://rickandmortyapi.com/api/character/new`, {
      body: JSON.stringify(character),
    });
    // The value we return becomes the `fulfilled` action payload
    if(response.status === 200) {
      return response.data;
    } else {
      return null;
    }
  }
);

export const characterData = createSlice({
  name: 'characterData',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addCharacterData: (state, action) => {
      state.characterData = action.payload;
    },
    cleanCharacterData: (state) => {
      console.log("clean character data")
      state.characterData = {
        ...initialState.characterData
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadCharacterData.pending, (state) => {
        console.log("loading....")
        state.status = 'loading';
      })
      .addCase(loadCharacterData.fulfilled, (state, action) => {
        console.log("DONE")
        state.status = 'done';
        state.characterData = action.payload;
      })
      .addCase(loadCharacterData.rejected, (state) => {
        state.status = 'fail';
      })
      .addCase(saveCharacter.pending, (state) => {
        state.status = "loading"
      })
      .addCase(saveCharacter.fulfilled, (state, action) => {
        state.status = "done"
        state.id = action.payload;
      })
  },
});

export const { addCharacterData, cleanCharacterData } = characterData.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;
//
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default characterData.reducer;
